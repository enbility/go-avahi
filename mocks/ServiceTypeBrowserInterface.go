// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	avahi "github.com/enbility/go-avahi"
	dbus "github.com/godbus/dbus/v5"

	mock "github.com/stretchr/testify/mock"
)

// ServiceTypeBrowserInterface is an autogenerated mock type for the ServiceTypeBrowserInterface type
type ServiceTypeBrowserInterface struct {
	mock.Mock
}

type ServiceTypeBrowserInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ServiceTypeBrowserInterface) EXPECT() *ServiceTypeBrowserInterface_Expecter {
	return &ServiceTypeBrowserInterface_Expecter{mock: &_m.Mock}
}

// AddChannel provides a mock function with given fields:
func (_m *ServiceTypeBrowserInterface) AddChannel() chan avahi.ServiceType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AddChannel")
	}

	var r0 chan avahi.ServiceType
	if rf, ok := ret.Get(0).(func() chan avahi.ServiceType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan avahi.ServiceType)
		}
	}

	return r0
}

// ServiceTypeBrowserInterface_AddChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddChannel'
type ServiceTypeBrowserInterface_AddChannel_Call struct {
	*mock.Call
}

// AddChannel is a helper method to define mock.On call
func (_e *ServiceTypeBrowserInterface_Expecter) AddChannel() *ServiceTypeBrowserInterface_AddChannel_Call {
	return &ServiceTypeBrowserInterface_AddChannel_Call{Call: _e.mock.On("AddChannel")}
}

func (_c *ServiceTypeBrowserInterface_AddChannel_Call) Run(run func()) *ServiceTypeBrowserInterface_AddChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServiceTypeBrowserInterface_AddChannel_Call) Return(_a0 chan avahi.ServiceType) *ServiceTypeBrowserInterface_AddChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceTypeBrowserInterface_AddChannel_Call) RunAndReturn(run func() chan avahi.ServiceType) *ServiceTypeBrowserInterface_AddChannel_Call {
	_c.Call.Return(run)
	return _c
}

// DispatchSignal provides a mock function with given fields: signal
func (_m *ServiceTypeBrowserInterface) DispatchSignal(signal *dbus.Signal) error {
	ret := _m.Called(signal)

	if len(ret) == 0 {
		panic("no return value specified for DispatchSignal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dbus.Signal) error); ok {
		r0 = rf(signal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServiceTypeBrowserInterface_DispatchSignal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DispatchSignal'
type ServiceTypeBrowserInterface_DispatchSignal_Call struct {
	*mock.Call
}

// DispatchSignal is a helper method to define mock.On call
//   - signal *dbus.Signal
func (_e *ServiceTypeBrowserInterface_Expecter) DispatchSignal(signal interface{}) *ServiceTypeBrowserInterface_DispatchSignal_Call {
	return &ServiceTypeBrowserInterface_DispatchSignal_Call{Call: _e.mock.On("DispatchSignal", signal)}
}

func (_c *ServiceTypeBrowserInterface_DispatchSignal_Call) Run(run func(signal *dbus.Signal)) *ServiceTypeBrowserInterface_DispatchSignal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dbus.Signal))
	})
	return _c
}

func (_c *ServiceTypeBrowserInterface_DispatchSignal_Call) Return(_a0 error) *ServiceTypeBrowserInterface_DispatchSignal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceTypeBrowserInterface_DispatchSignal_Call) RunAndReturn(run func(*dbus.Signal) error) *ServiceTypeBrowserInterface_DispatchSignal_Call {
	_c.Call.Return(run)
	return _c
}

// Free provides a mock function with given fields:
func (_m *ServiceTypeBrowserInterface) Free() {
	_m.Called()
}

// ServiceTypeBrowserInterface_Free_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Free'
type ServiceTypeBrowserInterface_Free_Call struct {
	*mock.Call
}

// Free is a helper method to define mock.On call
func (_e *ServiceTypeBrowserInterface_Expecter) Free() *ServiceTypeBrowserInterface_Free_Call {
	return &ServiceTypeBrowserInterface_Free_Call{Call: _e.mock.On("Free")}
}

func (_c *ServiceTypeBrowserInterface_Free_Call) Run(run func()) *ServiceTypeBrowserInterface_Free_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServiceTypeBrowserInterface_Free_Call) Return() *ServiceTypeBrowserInterface_Free_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServiceTypeBrowserInterface_Free_Call) RunAndReturn(run func()) *ServiceTypeBrowserInterface_Free_Call {
	_c.Call.Return(run)
	return _c
}

// GetObjectPath provides a mock function with given fields:
func (_m *ServiceTypeBrowserInterface) GetObjectPath() dbus.ObjectPath {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetObjectPath")
	}

	var r0 dbus.ObjectPath
	if rf, ok := ret.Get(0).(func() dbus.ObjectPath); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(dbus.ObjectPath)
	}

	return r0
}

// ServiceTypeBrowserInterface_GetObjectPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObjectPath'
type ServiceTypeBrowserInterface_GetObjectPath_Call struct {
	*mock.Call
}

// GetObjectPath is a helper method to define mock.On call
func (_e *ServiceTypeBrowserInterface_Expecter) GetObjectPath() *ServiceTypeBrowserInterface_GetObjectPath_Call {
	return &ServiceTypeBrowserInterface_GetObjectPath_Call{Call: _e.mock.On("GetObjectPath")}
}

func (_c *ServiceTypeBrowserInterface_GetObjectPath_Call) Run(run func()) *ServiceTypeBrowserInterface_GetObjectPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServiceTypeBrowserInterface_GetObjectPath_Call) Return(_a0 dbus.ObjectPath) *ServiceTypeBrowserInterface_GetObjectPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceTypeBrowserInterface_GetObjectPath_Call) RunAndReturn(run func() dbus.ObjectPath) *ServiceTypeBrowserInterface_GetObjectPath_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveChannel provides a mock function with given fields:
func (_m *ServiceTypeBrowserInterface) RemoveChannel() chan avahi.ServiceType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RemoveChannel")
	}

	var r0 chan avahi.ServiceType
	if rf, ok := ret.Get(0).(func() chan avahi.ServiceType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan avahi.ServiceType)
		}
	}

	return r0
}

// ServiceTypeBrowserInterface_RemoveChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveChannel'
type ServiceTypeBrowserInterface_RemoveChannel_Call struct {
	*mock.Call
}

// RemoveChannel is a helper method to define mock.On call
func (_e *ServiceTypeBrowserInterface_Expecter) RemoveChannel() *ServiceTypeBrowserInterface_RemoveChannel_Call {
	return &ServiceTypeBrowserInterface_RemoveChannel_Call{Call: _e.mock.On("RemoveChannel")}
}

func (_c *ServiceTypeBrowserInterface_RemoveChannel_Call) Run(run func()) *ServiceTypeBrowserInterface_RemoveChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServiceTypeBrowserInterface_RemoveChannel_Call) Return(_a0 chan avahi.ServiceType) *ServiceTypeBrowserInterface_RemoveChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceTypeBrowserInterface_RemoveChannel_Call) RunAndReturn(run func() chan avahi.ServiceType) *ServiceTypeBrowserInterface_RemoveChannel_Call {
	_c.Call.Return(run)
	return _c
}

// NewServiceTypeBrowserInterface creates a new instance of ServiceTypeBrowserInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceTypeBrowserInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceTypeBrowserInterface {
	mock := &ServiceTypeBrowserInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
