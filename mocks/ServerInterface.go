// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	avahi "github.com/enbility/go-avahi"
	mock "github.com/stretchr/testify/mock"
)

// ServerInterface is an autogenerated mock type for the ServerInterface type
type ServerInterface struct {
	mock.Mock
}

type ServerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ServerInterface) EXPECT() *ServerInterface_Expecter {
	return &ServerInterface_Expecter{mock: &_m.Mock}
}

// AddressResolverFree provides a mock function with given fields: r
func (_m *ServerInterface) AddressResolverFree(r avahi.AddressResolverInterface) {
	_m.Called(r)
}

// ServerInterface_AddressResolverFree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddressResolverFree'
type ServerInterface_AddressResolverFree_Call struct {
	*mock.Call
}

// AddressResolverFree is a helper method to define mock.On call
//   - r avahi.AddressResolverInterface
func (_e *ServerInterface_Expecter) AddressResolverFree(r interface{}) *ServerInterface_AddressResolverFree_Call {
	return &ServerInterface_AddressResolverFree_Call{Call: _e.mock.On("AddressResolverFree", r)}
}

func (_c *ServerInterface_AddressResolverFree_Call) Run(run func(r avahi.AddressResolverInterface)) *ServerInterface_AddressResolverFree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(avahi.AddressResolverInterface))
	})
	return _c
}

func (_c *ServerInterface_AddressResolverFree_Call) Return() *ServerInterface_AddressResolverFree_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServerInterface_AddressResolverFree_Call) RunAndReturn(run func(avahi.AddressResolverInterface)) *ServerInterface_AddressResolverFree_Call {
	_c.Call.Return(run)
	return _c
}

// AddressResolverNew provides a mock function with given fields: iface, protocol, address, flags
func (_m *ServerInterface) AddressResolverNew(iface int32, protocol int32, address string, flags uint32) (avahi.AddressResolverInterface, error) {
	ret := _m.Called(iface, protocol, address, flags)

	if len(ret) == 0 {
		panic("no return value specified for AddressResolverNew")
	}

	var r0 avahi.AddressResolverInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(int32, int32, string, uint32) (avahi.AddressResolverInterface, error)); ok {
		return rf(iface, protocol, address, flags)
	}
	if rf, ok := ret.Get(0).(func(int32, int32, string, uint32) avahi.AddressResolverInterface); ok {
		r0 = rf(iface, protocol, address, flags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(avahi.AddressResolverInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(int32, int32, string, uint32) error); ok {
		r1 = rf(iface, protocol, address, flags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerInterface_AddressResolverNew_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddressResolverNew'
type ServerInterface_AddressResolverNew_Call struct {
	*mock.Call
}

// AddressResolverNew is a helper method to define mock.On call
//   - iface int32
//   - protocol int32
//   - address string
//   - flags uint32
func (_e *ServerInterface_Expecter) AddressResolverNew(iface interface{}, protocol interface{}, address interface{}, flags interface{}) *ServerInterface_AddressResolverNew_Call {
	return &ServerInterface_AddressResolverNew_Call{Call: _e.mock.On("AddressResolverNew", iface, protocol, address, flags)}
}

func (_c *ServerInterface_AddressResolverNew_Call) Run(run func(iface int32, protocol int32, address string, flags uint32)) *ServerInterface_AddressResolverNew_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int32), args[1].(int32), args[2].(string), args[3].(uint32))
	})
	return _c
}

func (_c *ServerInterface_AddressResolverNew_Call) Return(_a0 avahi.AddressResolverInterface, _a1 error) *ServerInterface_AddressResolverNew_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServerInterface_AddressResolverNew_Call) RunAndReturn(run func(int32, int32, string, uint32) (avahi.AddressResolverInterface, error)) *ServerInterface_AddressResolverNew_Call {
	_c.Call.Return(run)
	return _c
}

// DomainBrowserFree provides a mock function with given fields: r
func (_m *ServerInterface) DomainBrowserFree(r avahi.DomainBrowserInterface) {
	_m.Called(r)
}

// ServerInterface_DomainBrowserFree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DomainBrowserFree'
type ServerInterface_DomainBrowserFree_Call struct {
	*mock.Call
}

// DomainBrowserFree is a helper method to define mock.On call
//   - r avahi.DomainBrowserInterface
func (_e *ServerInterface_Expecter) DomainBrowserFree(r interface{}) *ServerInterface_DomainBrowserFree_Call {
	return &ServerInterface_DomainBrowserFree_Call{Call: _e.mock.On("DomainBrowserFree", r)}
}

func (_c *ServerInterface_DomainBrowserFree_Call) Run(run func(r avahi.DomainBrowserInterface)) *ServerInterface_DomainBrowserFree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(avahi.DomainBrowserInterface))
	})
	return _c
}

func (_c *ServerInterface_DomainBrowserFree_Call) Return() *ServerInterface_DomainBrowserFree_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServerInterface_DomainBrowserFree_Call) RunAndReturn(run func(avahi.DomainBrowserInterface)) *ServerInterface_DomainBrowserFree_Call {
	_c.Call.Return(run)
	return _c
}

// DomainBrowserNew provides a mock function with given fields: iface, protocol, domain, btype, flags
func (_m *ServerInterface) DomainBrowserNew(iface int32, protocol int32, domain string, btype int32, flags uint32) (avahi.DomainBrowserInterface, error) {
	ret := _m.Called(iface, protocol, domain, btype, flags)

	if len(ret) == 0 {
		panic("no return value specified for DomainBrowserNew")
	}

	var r0 avahi.DomainBrowserInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(int32, int32, string, int32, uint32) (avahi.DomainBrowserInterface, error)); ok {
		return rf(iface, protocol, domain, btype, flags)
	}
	if rf, ok := ret.Get(0).(func(int32, int32, string, int32, uint32) avahi.DomainBrowserInterface); ok {
		r0 = rf(iface, protocol, domain, btype, flags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(avahi.DomainBrowserInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(int32, int32, string, int32, uint32) error); ok {
		r1 = rf(iface, protocol, domain, btype, flags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerInterface_DomainBrowserNew_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DomainBrowserNew'
type ServerInterface_DomainBrowserNew_Call struct {
	*mock.Call
}

// DomainBrowserNew is a helper method to define mock.On call
//   - iface int32
//   - protocol int32
//   - domain string
//   - btype int32
//   - flags uint32
func (_e *ServerInterface_Expecter) DomainBrowserNew(iface interface{}, protocol interface{}, domain interface{}, btype interface{}, flags interface{}) *ServerInterface_DomainBrowserNew_Call {
	return &ServerInterface_DomainBrowserNew_Call{Call: _e.mock.On("DomainBrowserNew", iface, protocol, domain, btype, flags)}
}

func (_c *ServerInterface_DomainBrowserNew_Call) Run(run func(iface int32, protocol int32, domain string, btype int32, flags uint32)) *ServerInterface_DomainBrowserNew_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int32), args[1].(int32), args[2].(string), args[3].(int32), args[4].(uint32))
	})
	return _c
}

func (_c *ServerInterface_DomainBrowserNew_Call) Return(_a0 avahi.DomainBrowserInterface, _a1 error) *ServerInterface_DomainBrowserNew_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServerInterface_DomainBrowserNew_Call) RunAndReturn(run func(int32, int32, string, int32, uint32) (avahi.DomainBrowserInterface, error)) *ServerInterface_DomainBrowserNew_Call {
	_c.Call.Return(run)
	return _c
}

// EntryGroupFree provides a mock function with given fields: r
func (_m *ServerInterface) EntryGroupFree(r avahi.EntryGroupInterface) {
	_m.Called(r)
}

// ServerInterface_EntryGroupFree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EntryGroupFree'
type ServerInterface_EntryGroupFree_Call struct {
	*mock.Call
}

// EntryGroupFree is a helper method to define mock.On call
//   - r avahi.EntryGroupInterface
func (_e *ServerInterface_Expecter) EntryGroupFree(r interface{}) *ServerInterface_EntryGroupFree_Call {
	return &ServerInterface_EntryGroupFree_Call{Call: _e.mock.On("EntryGroupFree", r)}
}

func (_c *ServerInterface_EntryGroupFree_Call) Run(run func(r avahi.EntryGroupInterface)) *ServerInterface_EntryGroupFree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(avahi.EntryGroupInterface))
	})
	return _c
}

func (_c *ServerInterface_EntryGroupFree_Call) Return() *ServerInterface_EntryGroupFree_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServerInterface_EntryGroupFree_Call) RunAndReturn(run func(avahi.EntryGroupInterface)) *ServerInterface_EntryGroupFree_Call {
	_c.Call.Return(run)
	return _c
}

// EntryGroupNew provides a mock function with given fields:
func (_m *ServerInterface) EntryGroupNew() (avahi.EntryGroupInterface, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EntryGroupNew")
	}

	var r0 avahi.EntryGroupInterface
	var r1 error
	if rf, ok := ret.Get(0).(func() (avahi.EntryGroupInterface, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() avahi.EntryGroupInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(avahi.EntryGroupInterface)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerInterface_EntryGroupNew_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EntryGroupNew'
type ServerInterface_EntryGroupNew_Call struct {
	*mock.Call
}

// EntryGroupNew is a helper method to define mock.On call
func (_e *ServerInterface_Expecter) EntryGroupNew() *ServerInterface_EntryGroupNew_Call {
	return &ServerInterface_EntryGroupNew_Call{Call: _e.mock.On("EntryGroupNew")}
}

func (_c *ServerInterface_EntryGroupNew_Call) Run(run func()) *ServerInterface_EntryGroupNew_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServerInterface_EntryGroupNew_Call) Return(_a0 avahi.EntryGroupInterface, _a1 error) *ServerInterface_EntryGroupNew_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServerInterface_EntryGroupNew_Call) RunAndReturn(run func() (avahi.EntryGroupInterface, error)) *ServerInterface_EntryGroupNew_Call {
	_c.Call.Return(run)
	return _c
}

// GetAPIVersion provides a mock function with given fields:
func (_m *ServerInterface) GetAPIVersion() (int32, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAPIVersion")
	}

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func() (int32, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerInterface_GetAPIVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAPIVersion'
type ServerInterface_GetAPIVersion_Call struct {
	*mock.Call
}

// GetAPIVersion is a helper method to define mock.On call
func (_e *ServerInterface_Expecter) GetAPIVersion() *ServerInterface_GetAPIVersion_Call {
	return &ServerInterface_GetAPIVersion_Call{Call: _e.mock.On("GetAPIVersion")}
}

func (_c *ServerInterface_GetAPIVersion_Call) Run(run func()) *ServerInterface_GetAPIVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServerInterface_GetAPIVersion_Call) Return(_a0 int32, _a1 error) *ServerInterface_GetAPIVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServerInterface_GetAPIVersion_Call) RunAndReturn(run func() (int32, error)) *ServerInterface_GetAPIVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlternativeHostName provides a mock function with given fields: name
func (_m *ServerInterface) GetAlternativeHostName(name string) (string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetAlternativeHostName")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerInterface_GetAlternativeHostName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlternativeHostName'
type ServerInterface_GetAlternativeHostName_Call struct {
	*mock.Call
}

// GetAlternativeHostName is a helper method to define mock.On call
//   - name string
func (_e *ServerInterface_Expecter) GetAlternativeHostName(name interface{}) *ServerInterface_GetAlternativeHostName_Call {
	return &ServerInterface_GetAlternativeHostName_Call{Call: _e.mock.On("GetAlternativeHostName", name)}
}

func (_c *ServerInterface_GetAlternativeHostName_Call) Run(run func(name string)) *ServerInterface_GetAlternativeHostName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ServerInterface_GetAlternativeHostName_Call) Return(_a0 string, _a1 error) *ServerInterface_GetAlternativeHostName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServerInterface_GetAlternativeHostName_Call) RunAndReturn(run func(string) (string, error)) *ServerInterface_GetAlternativeHostName_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlternativeServiceName provides a mock function with given fields: name
func (_m *ServerInterface) GetAlternativeServiceName(name string) (string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetAlternativeServiceName")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerInterface_GetAlternativeServiceName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlternativeServiceName'
type ServerInterface_GetAlternativeServiceName_Call struct {
	*mock.Call
}

// GetAlternativeServiceName is a helper method to define mock.On call
//   - name string
func (_e *ServerInterface_Expecter) GetAlternativeServiceName(name interface{}) *ServerInterface_GetAlternativeServiceName_Call {
	return &ServerInterface_GetAlternativeServiceName_Call{Call: _e.mock.On("GetAlternativeServiceName", name)}
}

func (_c *ServerInterface_GetAlternativeServiceName_Call) Run(run func(name string)) *ServerInterface_GetAlternativeServiceName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ServerInterface_GetAlternativeServiceName_Call) Return(_a0 string, _a1 error) *ServerInterface_GetAlternativeServiceName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServerInterface_GetAlternativeServiceName_Call) RunAndReturn(run func(string) (string, error)) *ServerInterface_GetAlternativeServiceName_Call {
	_c.Call.Return(run)
	return _c
}

// GetDomainName provides a mock function with given fields:
func (_m *ServerInterface) GetDomainName() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDomainName")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerInterface_GetDomainName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDomainName'
type ServerInterface_GetDomainName_Call struct {
	*mock.Call
}

// GetDomainName is a helper method to define mock.On call
func (_e *ServerInterface_Expecter) GetDomainName() *ServerInterface_GetDomainName_Call {
	return &ServerInterface_GetDomainName_Call{Call: _e.mock.On("GetDomainName")}
}

func (_c *ServerInterface_GetDomainName_Call) Run(run func()) *ServerInterface_GetDomainName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServerInterface_GetDomainName_Call) Return(_a0 string, _a1 error) *ServerInterface_GetDomainName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServerInterface_GetDomainName_Call) RunAndReturn(run func() (string, error)) *ServerInterface_GetDomainName_Call {
	_c.Call.Return(run)
	return _c
}

// GetHostName provides a mock function with given fields:
func (_m *ServerInterface) GetHostName() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHostName")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerInterface_GetHostName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHostName'
type ServerInterface_GetHostName_Call struct {
	*mock.Call
}

// GetHostName is a helper method to define mock.On call
func (_e *ServerInterface_Expecter) GetHostName() *ServerInterface_GetHostName_Call {
	return &ServerInterface_GetHostName_Call{Call: _e.mock.On("GetHostName")}
}

func (_c *ServerInterface_GetHostName_Call) Run(run func()) *ServerInterface_GetHostName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServerInterface_GetHostName_Call) Return(_a0 string, _a1 error) *ServerInterface_GetHostName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServerInterface_GetHostName_Call) RunAndReturn(run func() (string, error)) *ServerInterface_GetHostName_Call {
	_c.Call.Return(run)
	return _c
}

// GetHostNameFqdn provides a mock function with given fields:
func (_m *ServerInterface) GetHostNameFqdn() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHostNameFqdn")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerInterface_GetHostNameFqdn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHostNameFqdn'
type ServerInterface_GetHostNameFqdn_Call struct {
	*mock.Call
}

// GetHostNameFqdn is a helper method to define mock.On call
func (_e *ServerInterface_Expecter) GetHostNameFqdn() *ServerInterface_GetHostNameFqdn_Call {
	return &ServerInterface_GetHostNameFqdn_Call{Call: _e.mock.On("GetHostNameFqdn")}
}

func (_c *ServerInterface_GetHostNameFqdn_Call) Run(run func()) *ServerInterface_GetHostNameFqdn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServerInterface_GetHostNameFqdn_Call) Return(_a0 string, _a1 error) *ServerInterface_GetHostNameFqdn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServerInterface_GetHostNameFqdn_Call) RunAndReturn(run func() (string, error)) *ServerInterface_GetHostNameFqdn_Call {
	_c.Call.Return(run)
	return _c
}

// GetLocalServiceCookie provides a mock function with given fields:
func (_m *ServerInterface) GetLocalServiceCookie() (int32, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLocalServiceCookie")
	}

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func() (int32, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerInterface_GetLocalServiceCookie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocalServiceCookie'
type ServerInterface_GetLocalServiceCookie_Call struct {
	*mock.Call
}

// GetLocalServiceCookie is a helper method to define mock.On call
func (_e *ServerInterface_Expecter) GetLocalServiceCookie() *ServerInterface_GetLocalServiceCookie_Call {
	return &ServerInterface_GetLocalServiceCookie_Call{Call: _e.mock.On("GetLocalServiceCookie")}
}

func (_c *ServerInterface_GetLocalServiceCookie_Call) Run(run func()) *ServerInterface_GetLocalServiceCookie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServerInterface_GetLocalServiceCookie_Call) Return(_a0 int32, _a1 error) *ServerInterface_GetLocalServiceCookie_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServerInterface_GetLocalServiceCookie_Call) RunAndReturn(run func() (int32, error)) *ServerInterface_GetLocalServiceCookie_Call {
	_c.Call.Return(run)
	return _c
}

// GetNetworkInterfaceIndexByName provides a mock function with given fields: name
func (_m *ServerInterface) GetNetworkInterfaceIndexByName(name string) (int32, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkInterfaceIndexByName")
	}

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int32, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) int32); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerInterface_GetNetworkInterfaceIndexByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNetworkInterfaceIndexByName'
type ServerInterface_GetNetworkInterfaceIndexByName_Call struct {
	*mock.Call
}

// GetNetworkInterfaceIndexByName is a helper method to define mock.On call
//   - name string
func (_e *ServerInterface_Expecter) GetNetworkInterfaceIndexByName(name interface{}) *ServerInterface_GetNetworkInterfaceIndexByName_Call {
	return &ServerInterface_GetNetworkInterfaceIndexByName_Call{Call: _e.mock.On("GetNetworkInterfaceIndexByName", name)}
}

func (_c *ServerInterface_GetNetworkInterfaceIndexByName_Call) Run(run func(name string)) *ServerInterface_GetNetworkInterfaceIndexByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ServerInterface_GetNetworkInterfaceIndexByName_Call) Return(_a0 int32, _a1 error) *ServerInterface_GetNetworkInterfaceIndexByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServerInterface_GetNetworkInterfaceIndexByName_Call) RunAndReturn(run func(string) (int32, error)) *ServerInterface_GetNetworkInterfaceIndexByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetNetworkInterfaceNameByIndex provides a mock function with given fields: index
func (_m *ServerInterface) GetNetworkInterfaceNameByIndex(index int32) (string, error) {
	ret := _m.Called(index)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkInterfaceNameByIndex")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int32) (string, error)); ok {
		return rf(index)
	}
	if rf, ok := ret.Get(0).(func(int32) string); ok {
		r0 = rf(index)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerInterface_GetNetworkInterfaceNameByIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNetworkInterfaceNameByIndex'
type ServerInterface_GetNetworkInterfaceNameByIndex_Call struct {
	*mock.Call
}

// GetNetworkInterfaceNameByIndex is a helper method to define mock.On call
//   - index int32
func (_e *ServerInterface_Expecter) GetNetworkInterfaceNameByIndex(index interface{}) *ServerInterface_GetNetworkInterfaceNameByIndex_Call {
	return &ServerInterface_GetNetworkInterfaceNameByIndex_Call{Call: _e.mock.On("GetNetworkInterfaceNameByIndex", index)}
}

func (_c *ServerInterface_GetNetworkInterfaceNameByIndex_Call) Run(run func(index int32)) *ServerInterface_GetNetworkInterfaceNameByIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int32))
	})
	return _c
}

func (_c *ServerInterface_GetNetworkInterfaceNameByIndex_Call) Return(_a0 string, _a1 error) *ServerInterface_GetNetworkInterfaceNameByIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServerInterface_GetNetworkInterfaceNameByIndex_Call) RunAndReturn(run func(int32) (string, error)) *ServerInterface_GetNetworkInterfaceNameByIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetState provides a mock function with given fields:
func (_m *ServerInterface) GetState() (int32, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetState")
	}

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func() (int32, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerInterface_GetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetState'
type ServerInterface_GetState_Call struct {
	*mock.Call
}

// GetState is a helper method to define mock.On call
func (_e *ServerInterface_Expecter) GetState() *ServerInterface_GetState_Call {
	return &ServerInterface_GetState_Call{Call: _e.mock.On("GetState")}
}

func (_c *ServerInterface_GetState_Call) Run(run func()) *ServerInterface_GetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServerInterface_GetState_Call) Return(_a0 int32, _a1 error) *ServerInterface_GetState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServerInterface_GetState_Call) RunAndReturn(run func() (int32, error)) *ServerInterface_GetState_Call {
	_c.Call.Return(run)
	return _c
}

// GetVersionString provides a mock function with given fields:
func (_m *ServerInterface) GetVersionString() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetVersionString")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerInterface_GetVersionString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersionString'
type ServerInterface_GetVersionString_Call struct {
	*mock.Call
}

// GetVersionString is a helper method to define mock.On call
func (_e *ServerInterface_Expecter) GetVersionString() *ServerInterface_GetVersionString_Call {
	return &ServerInterface_GetVersionString_Call{Call: _e.mock.On("GetVersionString")}
}

func (_c *ServerInterface_GetVersionString_Call) Run(run func()) *ServerInterface_GetVersionString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServerInterface_GetVersionString_Call) Return(_a0 string, _a1 error) *ServerInterface_GetVersionString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServerInterface_GetVersionString_Call) RunAndReturn(run func() (string, error)) *ServerInterface_GetVersionString_Call {
	_c.Call.Return(run)
	return _c
}

// HostNameResolverNew provides a mock function with given fields: iface, protocol, name, aprotocol, flags
func (_m *ServerInterface) HostNameResolverNew(iface int32, protocol int32, name string, aprotocol int32, flags uint32) (avahi.HostNameResolverInterface, error) {
	ret := _m.Called(iface, protocol, name, aprotocol, flags)

	if len(ret) == 0 {
		panic("no return value specified for HostNameResolverNew")
	}

	var r0 avahi.HostNameResolverInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(int32, int32, string, int32, uint32) (avahi.HostNameResolverInterface, error)); ok {
		return rf(iface, protocol, name, aprotocol, flags)
	}
	if rf, ok := ret.Get(0).(func(int32, int32, string, int32, uint32) avahi.HostNameResolverInterface); ok {
		r0 = rf(iface, protocol, name, aprotocol, flags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(avahi.HostNameResolverInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(int32, int32, string, int32, uint32) error); ok {
		r1 = rf(iface, protocol, name, aprotocol, flags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerInterface_HostNameResolverNew_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HostNameResolverNew'
type ServerInterface_HostNameResolverNew_Call struct {
	*mock.Call
}

// HostNameResolverNew is a helper method to define mock.On call
//   - iface int32
//   - protocol int32
//   - name string
//   - aprotocol int32
//   - flags uint32
func (_e *ServerInterface_Expecter) HostNameResolverNew(iface interface{}, protocol interface{}, name interface{}, aprotocol interface{}, flags interface{}) *ServerInterface_HostNameResolverNew_Call {
	return &ServerInterface_HostNameResolverNew_Call{Call: _e.mock.On("HostNameResolverNew", iface, protocol, name, aprotocol, flags)}
}

func (_c *ServerInterface_HostNameResolverNew_Call) Run(run func(iface int32, protocol int32, name string, aprotocol int32, flags uint32)) *ServerInterface_HostNameResolverNew_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int32), args[1].(int32), args[2].(string), args[3].(int32), args[4].(uint32))
	})
	return _c
}

func (_c *ServerInterface_HostNameResolverNew_Call) Return(_a0 avahi.HostNameResolverInterface, _a1 error) *ServerInterface_HostNameResolverNew_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServerInterface_HostNameResolverNew_Call) RunAndReturn(run func(int32, int32, string, int32, uint32) (avahi.HostNameResolverInterface, error)) *ServerInterface_HostNameResolverNew_Call {
	_c.Call.Return(run)
	return _c
}

// IsNSSSupportAvailable provides a mock function with given fields:
func (_m *ServerInterface) IsNSSSupportAvailable() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsNSSSupportAvailable")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerInterface_IsNSSSupportAvailable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNSSSupportAvailable'
type ServerInterface_IsNSSSupportAvailable_Call struct {
	*mock.Call
}

// IsNSSSupportAvailable is a helper method to define mock.On call
func (_e *ServerInterface_Expecter) IsNSSSupportAvailable() *ServerInterface_IsNSSSupportAvailable_Call {
	return &ServerInterface_IsNSSSupportAvailable_Call{Call: _e.mock.On("IsNSSSupportAvailable")}
}

func (_c *ServerInterface_IsNSSSupportAvailable_Call) Run(run func()) *ServerInterface_IsNSSSupportAvailable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServerInterface_IsNSSSupportAvailable_Call) Return(_a0 bool, _a1 error) *ServerInterface_IsNSSSupportAvailable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServerInterface_IsNSSSupportAvailable_Call) RunAndReturn(run func() (bool, error)) *ServerInterface_IsNSSSupportAvailable_Call {
	_c.Call.Return(run)
	return _c
}

// RecordBrowserFree provides a mock function with given fields: r
func (_m *ServerInterface) RecordBrowserFree(r avahi.RecordBrowserInterface) {
	_m.Called(r)
}

// ServerInterface_RecordBrowserFree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordBrowserFree'
type ServerInterface_RecordBrowserFree_Call struct {
	*mock.Call
}

// RecordBrowserFree is a helper method to define mock.On call
//   - r avahi.RecordBrowserInterface
func (_e *ServerInterface_Expecter) RecordBrowserFree(r interface{}) *ServerInterface_RecordBrowserFree_Call {
	return &ServerInterface_RecordBrowserFree_Call{Call: _e.mock.On("RecordBrowserFree", r)}
}

func (_c *ServerInterface_RecordBrowserFree_Call) Run(run func(r avahi.RecordBrowserInterface)) *ServerInterface_RecordBrowserFree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(avahi.RecordBrowserInterface))
	})
	return _c
}

func (_c *ServerInterface_RecordBrowserFree_Call) Return() *ServerInterface_RecordBrowserFree_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServerInterface_RecordBrowserFree_Call) RunAndReturn(run func(avahi.RecordBrowserInterface)) *ServerInterface_RecordBrowserFree_Call {
	_c.Call.Return(run)
	return _c
}

// RecordBrowserNew provides a mock function with given fields: iface, protocol, name, class, recordType, flags
func (_m *ServerInterface) RecordBrowserNew(iface int32, protocol int32, name string, class uint16, recordType uint16, flags uint32) (avahi.RecordBrowserInterface, error) {
	ret := _m.Called(iface, protocol, name, class, recordType, flags)

	if len(ret) == 0 {
		panic("no return value specified for RecordBrowserNew")
	}

	var r0 avahi.RecordBrowserInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(int32, int32, string, uint16, uint16, uint32) (avahi.RecordBrowserInterface, error)); ok {
		return rf(iface, protocol, name, class, recordType, flags)
	}
	if rf, ok := ret.Get(0).(func(int32, int32, string, uint16, uint16, uint32) avahi.RecordBrowserInterface); ok {
		r0 = rf(iface, protocol, name, class, recordType, flags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(avahi.RecordBrowserInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(int32, int32, string, uint16, uint16, uint32) error); ok {
		r1 = rf(iface, protocol, name, class, recordType, flags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerInterface_RecordBrowserNew_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordBrowserNew'
type ServerInterface_RecordBrowserNew_Call struct {
	*mock.Call
}

// RecordBrowserNew is a helper method to define mock.On call
//   - iface int32
//   - protocol int32
//   - name string
//   - class uint16
//   - recordType uint16
//   - flags uint32
func (_e *ServerInterface_Expecter) RecordBrowserNew(iface interface{}, protocol interface{}, name interface{}, class interface{}, recordType interface{}, flags interface{}) *ServerInterface_RecordBrowserNew_Call {
	return &ServerInterface_RecordBrowserNew_Call{Call: _e.mock.On("RecordBrowserNew", iface, protocol, name, class, recordType, flags)}
}

func (_c *ServerInterface_RecordBrowserNew_Call) Run(run func(iface int32, protocol int32, name string, class uint16, recordType uint16, flags uint32)) *ServerInterface_RecordBrowserNew_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int32), args[1].(int32), args[2].(string), args[3].(uint16), args[4].(uint16), args[5].(uint32))
	})
	return _c
}

func (_c *ServerInterface_RecordBrowserNew_Call) Return(_a0 avahi.RecordBrowserInterface, _a1 error) *ServerInterface_RecordBrowserNew_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServerInterface_RecordBrowserNew_Call) RunAndReturn(run func(int32, int32, string, uint16, uint16, uint32) (avahi.RecordBrowserInterface, error)) *ServerInterface_RecordBrowserNew_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveAddress provides a mock function with given fields: iface, protocol, address, flags
func (_m *ServerInterface) ResolveAddress(iface int32, protocol int32, address string, flags uint32) (avahi.Address, error) {
	ret := _m.Called(iface, protocol, address, flags)

	if len(ret) == 0 {
		panic("no return value specified for ResolveAddress")
	}

	var r0 avahi.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(int32, int32, string, uint32) (avahi.Address, error)); ok {
		return rf(iface, protocol, address, flags)
	}
	if rf, ok := ret.Get(0).(func(int32, int32, string, uint32) avahi.Address); ok {
		r0 = rf(iface, protocol, address, flags)
	} else {
		r0 = ret.Get(0).(avahi.Address)
	}

	if rf, ok := ret.Get(1).(func(int32, int32, string, uint32) error); ok {
		r1 = rf(iface, protocol, address, flags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerInterface_ResolveAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveAddress'
type ServerInterface_ResolveAddress_Call struct {
	*mock.Call
}

// ResolveAddress is a helper method to define mock.On call
//   - iface int32
//   - protocol int32
//   - address string
//   - flags uint32
func (_e *ServerInterface_Expecter) ResolveAddress(iface interface{}, protocol interface{}, address interface{}, flags interface{}) *ServerInterface_ResolveAddress_Call {
	return &ServerInterface_ResolveAddress_Call{Call: _e.mock.On("ResolveAddress", iface, protocol, address, flags)}
}

func (_c *ServerInterface_ResolveAddress_Call) Run(run func(iface int32, protocol int32, address string, flags uint32)) *ServerInterface_ResolveAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int32), args[1].(int32), args[2].(string), args[3].(uint32))
	})
	return _c
}

func (_c *ServerInterface_ResolveAddress_Call) Return(reply avahi.Address, err error) *ServerInterface_ResolveAddress_Call {
	_c.Call.Return(reply, err)
	return _c
}

func (_c *ServerInterface_ResolveAddress_Call) RunAndReturn(run func(int32, int32, string, uint32) (avahi.Address, error)) *ServerInterface_ResolveAddress_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveHostName provides a mock function with given fields: iface, protocol, name, aprotocol, flags
func (_m *ServerInterface) ResolveHostName(iface int32, protocol int32, name string, aprotocol int32, flags uint32) (avahi.HostName, error) {
	ret := _m.Called(iface, protocol, name, aprotocol, flags)

	if len(ret) == 0 {
		panic("no return value specified for ResolveHostName")
	}

	var r0 avahi.HostName
	var r1 error
	if rf, ok := ret.Get(0).(func(int32, int32, string, int32, uint32) (avahi.HostName, error)); ok {
		return rf(iface, protocol, name, aprotocol, flags)
	}
	if rf, ok := ret.Get(0).(func(int32, int32, string, int32, uint32) avahi.HostName); ok {
		r0 = rf(iface, protocol, name, aprotocol, flags)
	} else {
		r0 = ret.Get(0).(avahi.HostName)
	}

	if rf, ok := ret.Get(1).(func(int32, int32, string, int32, uint32) error); ok {
		r1 = rf(iface, protocol, name, aprotocol, flags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerInterface_ResolveHostName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveHostName'
type ServerInterface_ResolveHostName_Call struct {
	*mock.Call
}

// ResolveHostName is a helper method to define mock.On call
//   - iface int32
//   - protocol int32
//   - name string
//   - aprotocol int32
//   - flags uint32
func (_e *ServerInterface_Expecter) ResolveHostName(iface interface{}, protocol interface{}, name interface{}, aprotocol interface{}, flags interface{}) *ServerInterface_ResolveHostName_Call {
	return &ServerInterface_ResolveHostName_Call{Call: _e.mock.On("ResolveHostName", iface, protocol, name, aprotocol, flags)}
}

func (_c *ServerInterface_ResolveHostName_Call) Run(run func(iface int32, protocol int32, name string, aprotocol int32, flags uint32)) *ServerInterface_ResolveHostName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int32), args[1].(int32), args[2].(string), args[3].(int32), args[4].(uint32))
	})
	return _c
}

func (_c *ServerInterface_ResolveHostName_Call) Return(reply avahi.HostName, err error) *ServerInterface_ResolveHostName_Call {
	_c.Call.Return(reply, err)
	return _c
}

func (_c *ServerInterface_ResolveHostName_Call) RunAndReturn(run func(int32, int32, string, int32, uint32) (avahi.HostName, error)) *ServerInterface_ResolveHostName_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveService provides a mock function with given fields: iface, protocol, name, serviceType, domain, aprotocol, flags
func (_m *ServerInterface) ResolveService(iface int32, protocol int32, name string, serviceType string, domain string, aprotocol int32, flags uint32) (avahi.Service, error) {
	ret := _m.Called(iface, protocol, name, serviceType, domain, aprotocol, flags)

	if len(ret) == 0 {
		panic("no return value specified for ResolveService")
	}

	var r0 avahi.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(int32, int32, string, string, string, int32, uint32) (avahi.Service, error)); ok {
		return rf(iface, protocol, name, serviceType, domain, aprotocol, flags)
	}
	if rf, ok := ret.Get(0).(func(int32, int32, string, string, string, int32, uint32) avahi.Service); ok {
		r0 = rf(iface, protocol, name, serviceType, domain, aprotocol, flags)
	} else {
		r0 = ret.Get(0).(avahi.Service)
	}

	if rf, ok := ret.Get(1).(func(int32, int32, string, string, string, int32, uint32) error); ok {
		r1 = rf(iface, protocol, name, serviceType, domain, aprotocol, flags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerInterface_ResolveService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveService'
type ServerInterface_ResolveService_Call struct {
	*mock.Call
}

// ResolveService is a helper method to define mock.On call
//   - iface int32
//   - protocol int32
//   - name string
//   - serviceType string
//   - domain string
//   - aprotocol int32
//   - flags uint32
func (_e *ServerInterface_Expecter) ResolveService(iface interface{}, protocol interface{}, name interface{}, serviceType interface{}, domain interface{}, aprotocol interface{}, flags interface{}) *ServerInterface_ResolveService_Call {
	return &ServerInterface_ResolveService_Call{Call: _e.mock.On("ResolveService", iface, protocol, name, serviceType, domain, aprotocol, flags)}
}

func (_c *ServerInterface_ResolveService_Call) Run(run func(iface int32, protocol int32, name string, serviceType string, domain string, aprotocol int32, flags uint32)) *ServerInterface_ResolveService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int32), args[1].(int32), args[2].(string), args[3].(string), args[4].(string), args[5].(int32), args[6].(uint32))
	})
	return _c
}

func (_c *ServerInterface_ResolveService_Call) Return(reply avahi.Service, err error) *ServerInterface_ResolveService_Call {
	_c.Call.Return(reply, err)
	return _c
}

func (_c *ServerInterface_ResolveService_Call) RunAndReturn(run func(int32, int32, string, string, string, int32, uint32) (avahi.Service, error)) *ServerInterface_ResolveService_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceBrowserFree provides a mock function with given fields: r
func (_m *ServerInterface) ServiceBrowserFree(r avahi.ServiceBrowserInterface) {
	_m.Called(r)
}

// ServerInterface_ServiceBrowserFree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceBrowserFree'
type ServerInterface_ServiceBrowserFree_Call struct {
	*mock.Call
}

// ServiceBrowserFree is a helper method to define mock.On call
//   - r avahi.ServiceBrowserInterface
func (_e *ServerInterface_Expecter) ServiceBrowserFree(r interface{}) *ServerInterface_ServiceBrowserFree_Call {
	return &ServerInterface_ServiceBrowserFree_Call{Call: _e.mock.On("ServiceBrowserFree", r)}
}

func (_c *ServerInterface_ServiceBrowserFree_Call) Run(run func(r avahi.ServiceBrowserInterface)) *ServerInterface_ServiceBrowserFree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(avahi.ServiceBrowserInterface))
	})
	return _c
}

func (_c *ServerInterface_ServiceBrowserFree_Call) Return() *ServerInterface_ServiceBrowserFree_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServerInterface_ServiceBrowserFree_Call) RunAndReturn(run func(avahi.ServiceBrowserInterface)) *ServerInterface_ServiceBrowserFree_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceBrowserNew provides a mock function with given fields: addChan, removeChan, iface, protocol, serviceType, domain, flags
func (_m *ServerInterface) ServiceBrowserNew(addChan chan avahi.Service, removeChan chan avahi.Service, iface int32, protocol int32, serviceType string, domain string, flags uint32) (avahi.ServiceBrowserInterface, error) {
	ret := _m.Called(addChan, removeChan, iface, protocol, serviceType, domain, flags)

	if len(ret) == 0 {
		panic("no return value specified for ServiceBrowserNew")
	}

	var r0 avahi.ServiceBrowserInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(chan avahi.Service, chan avahi.Service, int32, int32, string, string, uint32) (avahi.ServiceBrowserInterface, error)); ok {
		return rf(addChan, removeChan, iface, protocol, serviceType, domain, flags)
	}
	if rf, ok := ret.Get(0).(func(chan avahi.Service, chan avahi.Service, int32, int32, string, string, uint32) avahi.ServiceBrowserInterface); ok {
		r0 = rf(addChan, removeChan, iface, protocol, serviceType, domain, flags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(avahi.ServiceBrowserInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(chan avahi.Service, chan avahi.Service, int32, int32, string, string, uint32) error); ok {
		r1 = rf(addChan, removeChan, iface, protocol, serviceType, domain, flags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerInterface_ServiceBrowserNew_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceBrowserNew'
type ServerInterface_ServiceBrowserNew_Call struct {
	*mock.Call
}

// ServiceBrowserNew is a helper method to define mock.On call
//   - addChan chan avahi.Service
//   - removeChan chan avahi.Service
//   - iface int32
//   - protocol int32
//   - serviceType string
//   - domain string
//   - flags uint32
func (_e *ServerInterface_Expecter) ServiceBrowserNew(addChan interface{}, removeChan interface{}, iface interface{}, protocol interface{}, serviceType interface{}, domain interface{}, flags interface{}) *ServerInterface_ServiceBrowserNew_Call {
	return &ServerInterface_ServiceBrowserNew_Call{Call: _e.mock.On("ServiceBrowserNew", addChan, removeChan, iface, protocol, serviceType, domain, flags)}
}

func (_c *ServerInterface_ServiceBrowserNew_Call) Run(run func(addChan chan avahi.Service, removeChan chan avahi.Service, iface int32, protocol int32, serviceType string, domain string, flags uint32)) *ServerInterface_ServiceBrowserNew_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(chan avahi.Service), args[1].(chan avahi.Service), args[2].(int32), args[3].(int32), args[4].(string), args[5].(string), args[6].(uint32))
	})
	return _c
}

func (_c *ServerInterface_ServiceBrowserNew_Call) Return(_a0 avahi.ServiceBrowserInterface, _a1 error) *ServerInterface_ServiceBrowserNew_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServerInterface_ServiceBrowserNew_Call) RunAndReturn(run func(chan avahi.Service, chan avahi.Service, int32, int32, string, string, uint32) (avahi.ServiceBrowserInterface, error)) *ServerInterface_ServiceBrowserNew_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceResolverFree provides a mock function with given fields: r
func (_m *ServerInterface) ServiceResolverFree(r avahi.ServiceResolverInterface) {
	_m.Called(r)
}

// ServerInterface_ServiceResolverFree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceResolverFree'
type ServerInterface_ServiceResolverFree_Call struct {
	*mock.Call
}

// ServiceResolverFree is a helper method to define mock.On call
//   - r avahi.ServiceResolverInterface
func (_e *ServerInterface_Expecter) ServiceResolverFree(r interface{}) *ServerInterface_ServiceResolverFree_Call {
	return &ServerInterface_ServiceResolverFree_Call{Call: _e.mock.On("ServiceResolverFree", r)}
}

func (_c *ServerInterface_ServiceResolverFree_Call) Run(run func(r avahi.ServiceResolverInterface)) *ServerInterface_ServiceResolverFree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(avahi.ServiceResolverInterface))
	})
	return _c
}

func (_c *ServerInterface_ServiceResolverFree_Call) Return() *ServerInterface_ServiceResolverFree_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServerInterface_ServiceResolverFree_Call) RunAndReturn(run func(avahi.ServiceResolverInterface)) *ServerInterface_ServiceResolverFree_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceResolverNew provides a mock function with given fields: iface, protocol, name, serviceType, domain, aprotocol, flags
func (_m *ServerInterface) ServiceResolverNew(iface int32, protocol int32, name string, serviceType string, domain string, aprotocol int32, flags uint32) (avahi.ServiceResolverInterface, error) {
	ret := _m.Called(iface, protocol, name, serviceType, domain, aprotocol, flags)

	if len(ret) == 0 {
		panic("no return value specified for ServiceResolverNew")
	}

	var r0 avahi.ServiceResolverInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(int32, int32, string, string, string, int32, uint32) (avahi.ServiceResolverInterface, error)); ok {
		return rf(iface, protocol, name, serviceType, domain, aprotocol, flags)
	}
	if rf, ok := ret.Get(0).(func(int32, int32, string, string, string, int32, uint32) avahi.ServiceResolverInterface); ok {
		r0 = rf(iface, protocol, name, serviceType, domain, aprotocol, flags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(avahi.ServiceResolverInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(int32, int32, string, string, string, int32, uint32) error); ok {
		r1 = rf(iface, protocol, name, serviceType, domain, aprotocol, flags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerInterface_ServiceResolverNew_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceResolverNew'
type ServerInterface_ServiceResolverNew_Call struct {
	*mock.Call
}

// ServiceResolverNew is a helper method to define mock.On call
//   - iface int32
//   - protocol int32
//   - name string
//   - serviceType string
//   - domain string
//   - aprotocol int32
//   - flags uint32
func (_e *ServerInterface_Expecter) ServiceResolverNew(iface interface{}, protocol interface{}, name interface{}, serviceType interface{}, domain interface{}, aprotocol interface{}, flags interface{}) *ServerInterface_ServiceResolverNew_Call {
	return &ServerInterface_ServiceResolverNew_Call{Call: _e.mock.On("ServiceResolverNew", iface, protocol, name, serviceType, domain, aprotocol, flags)}
}

func (_c *ServerInterface_ServiceResolverNew_Call) Run(run func(iface int32, protocol int32, name string, serviceType string, domain string, aprotocol int32, flags uint32)) *ServerInterface_ServiceResolverNew_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int32), args[1].(int32), args[2].(string), args[3].(string), args[4].(string), args[5].(int32), args[6].(uint32))
	})
	return _c
}

func (_c *ServerInterface_ServiceResolverNew_Call) Return(_a0 avahi.ServiceResolverInterface, _a1 error) *ServerInterface_ServiceResolverNew_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServerInterface_ServiceResolverNew_Call) RunAndReturn(run func(int32, int32, string, string, string, int32, uint32) (avahi.ServiceResolverInterface, error)) *ServerInterface_ServiceResolverNew_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceTypeBrowserFree provides a mock function with given fields: r
func (_m *ServerInterface) ServiceTypeBrowserFree(r avahi.ServiceTypeBrowserInterface) {
	_m.Called(r)
}

// ServerInterface_ServiceTypeBrowserFree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceTypeBrowserFree'
type ServerInterface_ServiceTypeBrowserFree_Call struct {
	*mock.Call
}

// ServiceTypeBrowserFree is a helper method to define mock.On call
//   - r avahi.ServiceTypeBrowserInterface
func (_e *ServerInterface_Expecter) ServiceTypeBrowserFree(r interface{}) *ServerInterface_ServiceTypeBrowserFree_Call {
	return &ServerInterface_ServiceTypeBrowserFree_Call{Call: _e.mock.On("ServiceTypeBrowserFree", r)}
}

func (_c *ServerInterface_ServiceTypeBrowserFree_Call) Run(run func(r avahi.ServiceTypeBrowserInterface)) *ServerInterface_ServiceTypeBrowserFree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(avahi.ServiceTypeBrowserInterface))
	})
	return _c
}

func (_c *ServerInterface_ServiceTypeBrowserFree_Call) Return() *ServerInterface_ServiceTypeBrowserFree_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServerInterface_ServiceTypeBrowserFree_Call) RunAndReturn(run func(avahi.ServiceTypeBrowserInterface)) *ServerInterface_ServiceTypeBrowserFree_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceTypeBrowserNew provides a mock function with given fields: iface, protocol, domain, flags
func (_m *ServerInterface) ServiceTypeBrowserNew(iface int32, protocol int32, domain string, flags uint32) (avahi.ServiceTypeBrowserInterface, error) {
	ret := _m.Called(iface, protocol, domain, flags)

	if len(ret) == 0 {
		panic("no return value specified for ServiceTypeBrowserNew")
	}

	var r0 avahi.ServiceTypeBrowserInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(int32, int32, string, uint32) (avahi.ServiceTypeBrowserInterface, error)); ok {
		return rf(iface, protocol, domain, flags)
	}
	if rf, ok := ret.Get(0).(func(int32, int32, string, uint32) avahi.ServiceTypeBrowserInterface); ok {
		r0 = rf(iface, protocol, domain, flags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(avahi.ServiceTypeBrowserInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(int32, int32, string, uint32) error); ok {
		r1 = rf(iface, protocol, domain, flags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerInterface_ServiceTypeBrowserNew_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceTypeBrowserNew'
type ServerInterface_ServiceTypeBrowserNew_Call struct {
	*mock.Call
}

// ServiceTypeBrowserNew is a helper method to define mock.On call
//   - iface int32
//   - protocol int32
//   - domain string
//   - flags uint32
func (_e *ServerInterface_Expecter) ServiceTypeBrowserNew(iface interface{}, protocol interface{}, domain interface{}, flags interface{}) *ServerInterface_ServiceTypeBrowserNew_Call {
	return &ServerInterface_ServiceTypeBrowserNew_Call{Call: _e.mock.On("ServiceTypeBrowserNew", iface, protocol, domain, flags)}
}

func (_c *ServerInterface_ServiceTypeBrowserNew_Call) Run(run func(iface int32, protocol int32, domain string, flags uint32)) *ServerInterface_ServiceTypeBrowserNew_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int32), args[1].(int32), args[2].(string), args[3].(uint32))
	})
	return _c
}

func (_c *ServerInterface_ServiceTypeBrowserNew_Call) Return(_a0 avahi.ServiceTypeBrowserInterface, _a1 error) *ServerInterface_ServiceTypeBrowserNew_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServerInterface_ServiceTypeBrowserNew_Call) RunAndReturn(run func(int32, int32, string, uint32) (avahi.ServiceTypeBrowserInterface, error)) *ServerInterface_ServiceTypeBrowserNew_Call {
	_c.Call.Return(run)
	return _c
}

// SetServerName provides a mock function with given fields: name
func (_m *ServerInterface) SetServerName(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for SetServerName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServerInterface_SetServerName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetServerName'
type ServerInterface_SetServerName_Call struct {
	*mock.Call
}

// SetServerName is a helper method to define mock.On call
//   - name string
func (_e *ServerInterface_Expecter) SetServerName(name interface{}) *ServerInterface_SetServerName_Call {
	return &ServerInterface_SetServerName_Call{Call: _e.mock.On("SetServerName", name)}
}

func (_c *ServerInterface_SetServerName_Call) Run(run func(name string)) *ServerInterface_SetServerName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ServerInterface_SetServerName_Call) Return(_a0 error) *ServerInterface_SetServerName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServerInterface_SetServerName_Call) RunAndReturn(run func(string) error) *ServerInterface_SetServerName_Call {
	_c.Call.Return(run)
	return _c
}

// Setup provides a mock function with given fields: eventCB
func (_m *ServerInterface) Setup(eventCB avahi.EventCB) error {
	ret := _m.Called(eventCB)

	if len(ret) == 0 {
		panic("no return value specified for Setup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(avahi.EventCB) error); ok {
		r0 = rf(eventCB)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServerInterface_Setup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Setup'
type ServerInterface_Setup_Call struct {
	*mock.Call
}

// Setup is a helper method to define mock.On call
//   - eventCB avahi.EventCB
func (_e *ServerInterface_Expecter) Setup(eventCB interface{}) *ServerInterface_Setup_Call {
	return &ServerInterface_Setup_Call{Call: _e.mock.On("Setup", eventCB)}
}

func (_c *ServerInterface_Setup_Call) Run(run func(eventCB avahi.EventCB)) *ServerInterface_Setup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(avahi.EventCB))
	})
	return _c
}

func (_c *ServerInterface_Setup_Call) Return(_a0 error) *ServerInterface_Setup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServerInterface_Setup_Call) RunAndReturn(run func(avahi.EventCB) error) *ServerInterface_Setup_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields:
func (_m *ServerInterface) Shutdown() {
	_m.Called()
}

// ServerInterface_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type ServerInterface_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
func (_e *ServerInterface_Expecter) Shutdown() *ServerInterface_Shutdown_Call {
	return &ServerInterface_Shutdown_Call{Call: _e.mock.On("Shutdown")}
}

func (_c *ServerInterface_Shutdown_Call) Run(run func()) *ServerInterface_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServerInterface_Shutdown_Call) Return() *ServerInterface_Shutdown_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServerInterface_Shutdown_Call) RunAndReturn(run func()) *ServerInterface_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields:
func (_m *ServerInterface) Start() {
	_m.Called()
}

// ServerInterface_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type ServerInterface_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *ServerInterface_Expecter) Start() *ServerInterface_Start_Call {
	return &ServerInterface_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *ServerInterface_Start_Call) Run(run func()) *ServerInterface_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServerInterface_Start_Call) Return() *ServerInterface_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServerInterface_Start_Call) RunAndReturn(run func()) *ServerInterface_Start_Call {
	_c.Call.Return(run)
	return _c
}

// NewServerInterface creates a new instance of ServerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServerInterface {
	mock := &ServerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
