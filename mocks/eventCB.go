// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	avahi "github.com/enbility/go-avahi"
	mock "github.com/stretchr/testify/mock"
)

// EventCB is an autogenerated mock type for the EventCB type
type EventCB struct {
	mock.Mock
}

type EventCB_Expecter struct {
	mock *mock.Mock
}

func (_m *EventCB) EXPECT() *EventCB_Expecter {
	return &EventCB_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: event
func (_m *EventCB) Execute(event avahi.Event) {
	_m.Called(event)
}

// EventCB_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type EventCB_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - event avahi.Event
func (_e *EventCB_Expecter) Execute(event interface{}) *EventCB_Execute_Call {
	return &EventCB_Execute_Call{Call: _e.mock.On("Execute", event)}
}

func (_c *EventCB_Execute_Call) Run(run func(event avahi.Event)) *EventCB_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(avahi.Event))
	})
	return _c
}

func (_c *EventCB_Execute_Call) Return() *EventCB_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *EventCB_Execute_Call) RunAndReturn(run func(avahi.Event)) *EventCB_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewEventCB creates a new instance of EventCB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventCB(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventCB {
	mock := &EventCB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
