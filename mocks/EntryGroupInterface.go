// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	dbus "github.com/godbus/dbus/v5"
	mock "github.com/stretchr/testify/mock"
)

// EntryGroupInterface is an autogenerated mock type for the EntryGroupInterface type
type EntryGroupInterface struct {
	mock.Mock
}

type EntryGroupInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *EntryGroupInterface) EXPECT() *EntryGroupInterface_Expecter {
	return &EntryGroupInterface_Expecter{mock: &_m.Mock}
}

// AddAddress provides a mock function with given fields: iface, protocol, flags, name, address
func (_m *EntryGroupInterface) AddAddress(iface int32, protocol int32, flags uint32, name string, address string) error {
	ret := _m.Called(iface, protocol, flags, name, address)

	if len(ret) == 0 {
		panic("no return value specified for AddAddress")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int32, int32, uint32, string, string) error); ok {
		r0 = rf(iface, protocol, flags, name, address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EntryGroupInterface_AddAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAddress'
type EntryGroupInterface_AddAddress_Call struct {
	*mock.Call
}

// AddAddress is a helper method to define mock.On call
//   - iface int32
//   - protocol int32
//   - flags uint32
//   - name string
//   - address string
func (_e *EntryGroupInterface_Expecter) AddAddress(iface interface{}, protocol interface{}, flags interface{}, name interface{}, address interface{}) *EntryGroupInterface_AddAddress_Call {
	return &EntryGroupInterface_AddAddress_Call{Call: _e.mock.On("AddAddress", iface, protocol, flags, name, address)}
}

func (_c *EntryGroupInterface_AddAddress_Call) Run(run func(iface int32, protocol int32, flags uint32, name string, address string)) *EntryGroupInterface_AddAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int32), args[1].(int32), args[2].(uint32), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *EntryGroupInterface_AddAddress_Call) Return(_a0 error) *EntryGroupInterface_AddAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EntryGroupInterface_AddAddress_Call) RunAndReturn(run func(int32, int32, uint32, string, string) error) *EntryGroupInterface_AddAddress_Call {
	_c.Call.Return(run)
	return _c
}

// AddRecord provides a mock function with given fields: iface, protocol, flags, name, class, recordType, ttl, rdata
func (_m *EntryGroupInterface) AddRecord(iface int32, protocol int32, flags uint32, name string, class uint16, recordType uint16, ttl uint32, rdata []byte) error {
	ret := _m.Called(iface, protocol, flags, name, class, recordType, ttl, rdata)

	if len(ret) == 0 {
		panic("no return value specified for AddRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int32, int32, uint32, string, uint16, uint16, uint32, []byte) error); ok {
		r0 = rf(iface, protocol, flags, name, class, recordType, ttl, rdata)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EntryGroupInterface_AddRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRecord'
type EntryGroupInterface_AddRecord_Call struct {
	*mock.Call
}

// AddRecord is a helper method to define mock.On call
//   - iface int32
//   - protocol int32
//   - flags uint32
//   - name string
//   - class uint16
//   - recordType uint16
//   - ttl uint32
//   - rdata []byte
func (_e *EntryGroupInterface_Expecter) AddRecord(iface interface{}, protocol interface{}, flags interface{}, name interface{}, class interface{}, recordType interface{}, ttl interface{}, rdata interface{}) *EntryGroupInterface_AddRecord_Call {
	return &EntryGroupInterface_AddRecord_Call{Call: _e.mock.On("AddRecord", iface, protocol, flags, name, class, recordType, ttl, rdata)}
}

func (_c *EntryGroupInterface_AddRecord_Call) Run(run func(iface int32, protocol int32, flags uint32, name string, class uint16, recordType uint16, ttl uint32, rdata []byte)) *EntryGroupInterface_AddRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int32), args[1].(int32), args[2].(uint32), args[3].(string), args[4].(uint16), args[5].(uint16), args[6].(uint32), args[7].([]byte))
	})
	return _c
}

func (_c *EntryGroupInterface_AddRecord_Call) Return(_a0 error) *EntryGroupInterface_AddRecord_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EntryGroupInterface_AddRecord_Call) RunAndReturn(run func(int32, int32, uint32, string, uint16, uint16, uint32, []byte) error) *EntryGroupInterface_AddRecord_Call {
	_c.Call.Return(run)
	return _c
}

// AddService provides a mock function with given fields: iface, protocol, flags, name, serviceType, domain, host, port, txt
func (_m *EntryGroupInterface) AddService(iface int32, protocol int32, flags uint32, name string, serviceType string, domain string, host string, port uint16, txt [][]byte) error {
	ret := _m.Called(iface, protocol, flags, name, serviceType, domain, host, port, txt)

	if len(ret) == 0 {
		panic("no return value specified for AddService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int32, int32, uint32, string, string, string, string, uint16, [][]byte) error); ok {
		r0 = rf(iface, protocol, flags, name, serviceType, domain, host, port, txt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EntryGroupInterface_AddService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddService'
type EntryGroupInterface_AddService_Call struct {
	*mock.Call
}

// AddService is a helper method to define mock.On call
//   - iface int32
//   - protocol int32
//   - flags uint32
//   - name string
//   - serviceType string
//   - domain string
//   - host string
//   - port uint16
//   - txt [][]byte
func (_e *EntryGroupInterface_Expecter) AddService(iface interface{}, protocol interface{}, flags interface{}, name interface{}, serviceType interface{}, domain interface{}, host interface{}, port interface{}, txt interface{}) *EntryGroupInterface_AddService_Call {
	return &EntryGroupInterface_AddService_Call{Call: _e.mock.On("AddService", iface, protocol, flags, name, serviceType, domain, host, port, txt)}
}

func (_c *EntryGroupInterface_AddService_Call) Run(run func(iface int32, protocol int32, flags uint32, name string, serviceType string, domain string, host string, port uint16, txt [][]byte)) *EntryGroupInterface_AddService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int32), args[1].(int32), args[2].(uint32), args[3].(string), args[4].(string), args[5].(string), args[6].(string), args[7].(uint16), args[8].([][]byte))
	})
	return _c
}

func (_c *EntryGroupInterface_AddService_Call) Return(_a0 error) *EntryGroupInterface_AddService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EntryGroupInterface_AddService_Call) RunAndReturn(run func(int32, int32, uint32, string, string, string, string, uint16, [][]byte) error) *EntryGroupInterface_AddService_Call {
	_c.Call.Return(run)
	return _c
}

// AddServiceSubtype provides a mock function with given fields: iface, protocol, flags, name, serviceType, domain, subtype
func (_m *EntryGroupInterface) AddServiceSubtype(iface int32, protocol int32, flags uint32, name string, serviceType string, domain string, subtype string) error {
	ret := _m.Called(iface, protocol, flags, name, serviceType, domain, subtype)

	if len(ret) == 0 {
		panic("no return value specified for AddServiceSubtype")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int32, int32, uint32, string, string, string, string) error); ok {
		r0 = rf(iface, protocol, flags, name, serviceType, domain, subtype)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EntryGroupInterface_AddServiceSubtype_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddServiceSubtype'
type EntryGroupInterface_AddServiceSubtype_Call struct {
	*mock.Call
}

// AddServiceSubtype is a helper method to define mock.On call
//   - iface int32
//   - protocol int32
//   - flags uint32
//   - name string
//   - serviceType string
//   - domain string
//   - subtype string
func (_e *EntryGroupInterface_Expecter) AddServiceSubtype(iface interface{}, protocol interface{}, flags interface{}, name interface{}, serviceType interface{}, domain interface{}, subtype interface{}) *EntryGroupInterface_AddServiceSubtype_Call {
	return &EntryGroupInterface_AddServiceSubtype_Call{Call: _e.mock.On("AddServiceSubtype", iface, protocol, flags, name, serviceType, domain, subtype)}
}

func (_c *EntryGroupInterface_AddServiceSubtype_Call) Run(run func(iface int32, protocol int32, flags uint32, name string, serviceType string, domain string, subtype string)) *EntryGroupInterface_AddServiceSubtype_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int32), args[1].(int32), args[2].(uint32), args[3].(string), args[4].(string), args[5].(string), args[6].(string))
	})
	return _c
}

func (_c *EntryGroupInterface_AddServiceSubtype_Call) Return(_a0 error) *EntryGroupInterface_AddServiceSubtype_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EntryGroupInterface_AddServiceSubtype_Call) RunAndReturn(run func(int32, int32, uint32, string, string, string, string) error) *EntryGroupInterface_AddServiceSubtype_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with given fields:
func (_m *EntryGroupInterface) Commit() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EntryGroupInterface_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type EntryGroupInterface_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
func (_e *EntryGroupInterface_Expecter) Commit() *EntryGroupInterface_Commit_Call {
	return &EntryGroupInterface_Commit_Call{Call: _e.mock.On("Commit")}
}

func (_c *EntryGroupInterface_Commit_Call) Run(run func()) *EntryGroupInterface_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EntryGroupInterface_Commit_Call) Return(_a0 error) *EntryGroupInterface_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EntryGroupInterface_Commit_Call) RunAndReturn(run func() error) *EntryGroupInterface_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// DispatchSignal provides a mock function with given fields: signal
func (_m *EntryGroupInterface) DispatchSignal(signal *dbus.Signal) error {
	ret := _m.Called(signal)

	if len(ret) == 0 {
		panic("no return value specified for DispatchSignal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dbus.Signal) error); ok {
		r0 = rf(signal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EntryGroupInterface_DispatchSignal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DispatchSignal'
type EntryGroupInterface_DispatchSignal_Call struct {
	*mock.Call
}

// DispatchSignal is a helper method to define mock.On call
//   - signal *dbus.Signal
func (_e *EntryGroupInterface_Expecter) DispatchSignal(signal interface{}) *EntryGroupInterface_DispatchSignal_Call {
	return &EntryGroupInterface_DispatchSignal_Call{Call: _e.mock.On("DispatchSignal", signal)}
}

func (_c *EntryGroupInterface_DispatchSignal_Call) Run(run func(signal *dbus.Signal)) *EntryGroupInterface_DispatchSignal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dbus.Signal))
	})
	return _c
}

func (_c *EntryGroupInterface_DispatchSignal_Call) Return(_a0 error) *EntryGroupInterface_DispatchSignal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EntryGroupInterface_DispatchSignal_Call) RunAndReturn(run func(*dbus.Signal) error) *EntryGroupInterface_DispatchSignal_Call {
	_c.Call.Return(run)
	return _c
}

// Free provides a mock function with given fields:
func (_m *EntryGroupInterface) Free() {
	_m.Called()
}

// EntryGroupInterface_Free_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Free'
type EntryGroupInterface_Free_Call struct {
	*mock.Call
}

// Free is a helper method to define mock.On call
func (_e *EntryGroupInterface_Expecter) Free() *EntryGroupInterface_Free_Call {
	return &EntryGroupInterface_Free_Call{Call: _e.mock.On("Free")}
}

func (_c *EntryGroupInterface_Free_Call) Run(run func()) *EntryGroupInterface_Free_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EntryGroupInterface_Free_Call) Return() *EntryGroupInterface_Free_Call {
	_c.Call.Return()
	return _c
}

func (_c *EntryGroupInterface_Free_Call) RunAndReturn(run func()) *EntryGroupInterface_Free_Call {
	_c.Call.Return(run)
	return _c
}

// GetObjectPath provides a mock function with given fields:
func (_m *EntryGroupInterface) GetObjectPath() dbus.ObjectPath {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetObjectPath")
	}

	var r0 dbus.ObjectPath
	if rf, ok := ret.Get(0).(func() dbus.ObjectPath); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(dbus.ObjectPath)
	}

	return r0
}

// EntryGroupInterface_GetObjectPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObjectPath'
type EntryGroupInterface_GetObjectPath_Call struct {
	*mock.Call
}

// GetObjectPath is a helper method to define mock.On call
func (_e *EntryGroupInterface_Expecter) GetObjectPath() *EntryGroupInterface_GetObjectPath_Call {
	return &EntryGroupInterface_GetObjectPath_Call{Call: _e.mock.On("GetObjectPath")}
}

func (_c *EntryGroupInterface_GetObjectPath_Call) Run(run func()) *EntryGroupInterface_GetObjectPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EntryGroupInterface_GetObjectPath_Call) Return(_a0 dbus.ObjectPath) *EntryGroupInterface_GetObjectPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EntryGroupInterface_GetObjectPath_Call) RunAndReturn(run func() dbus.ObjectPath) *EntryGroupInterface_GetObjectPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetState provides a mock function with given fields:
func (_m *EntryGroupInterface) GetState() (int32, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetState")
	}

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func() (int32, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EntryGroupInterface_GetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetState'
type EntryGroupInterface_GetState_Call struct {
	*mock.Call
}

// GetState is a helper method to define mock.On call
func (_e *EntryGroupInterface_Expecter) GetState() *EntryGroupInterface_GetState_Call {
	return &EntryGroupInterface_GetState_Call{Call: _e.mock.On("GetState")}
}

func (_c *EntryGroupInterface_GetState_Call) Run(run func()) *EntryGroupInterface_GetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EntryGroupInterface_GetState_Call) Return(_a0 int32, _a1 error) *EntryGroupInterface_GetState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EntryGroupInterface_GetState_Call) RunAndReturn(run func() (int32, error)) *EntryGroupInterface_GetState_Call {
	_c.Call.Return(run)
	return _c
}

// IsEmpty provides a mock function with given fields:
func (_m *EntryGroupInterface) IsEmpty() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsEmpty")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EntryGroupInterface_IsEmpty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEmpty'
type EntryGroupInterface_IsEmpty_Call struct {
	*mock.Call
}

// IsEmpty is a helper method to define mock.On call
func (_e *EntryGroupInterface_Expecter) IsEmpty() *EntryGroupInterface_IsEmpty_Call {
	return &EntryGroupInterface_IsEmpty_Call{Call: _e.mock.On("IsEmpty")}
}

func (_c *EntryGroupInterface_IsEmpty_Call) Run(run func()) *EntryGroupInterface_IsEmpty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EntryGroupInterface_IsEmpty_Call) Return(_a0 bool, _a1 error) *EntryGroupInterface_IsEmpty_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EntryGroupInterface_IsEmpty_Call) RunAndReturn(run func() (bool, error)) *EntryGroupInterface_IsEmpty_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with given fields:
func (_m *EntryGroupInterface) Reset() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Reset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EntryGroupInterface_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type EntryGroupInterface_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
func (_e *EntryGroupInterface_Expecter) Reset() *EntryGroupInterface_Reset_Call {
	return &EntryGroupInterface_Reset_Call{Call: _e.mock.On("Reset")}
}

func (_c *EntryGroupInterface_Reset_Call) Run(run func()) *EntryGroupInterface_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EntryGroupInterface_Reset_Call) Return(_a0 error) *EntryGroupInterface_Reset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EntryGroupInterface_Reset_Call) RunAndReturn(run func() error) *EntryGroupInterface_Reset_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateServiceTxt provides a mock function with given fields: iface, protocol, flags, name, serviceType, domain, txt
func (_m *EntryGroupInterface) UpdateServiceTxt(iface int32, protocol int32, flags uint32, name string, serviceType string, domain string, txt [][]byte) error {
	ret := _m.Called(iface, protocol, flags, name, serviceType, domain, txt)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceTxt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int32, int32, uint32, string, string, string, [][]byte) error); ok {
		r0 = rf(iface, protocol, flags, name, serviceType, domain, txt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EntryGroupInterface_UpdateServiceTxt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateServiceTxt'
type EntryGroupInterface_UpdateServiceTxt_Call struct {
	*mock.Call
}

// UpdateServiceTxt is a helper method to define mock.On call
//   - iface int32
//   - protocol int32
//   - flags uint32
//   - name string
//   - serviceType string
//   - domain string
//   - txt [][]byte
func (_e *EntryGroupInterface_Expecter) UpdateServiceTxt(iface interface{}, protocol interface{}, flags interface{}, name interface{}, serviceType interface{}, domain interface{}, txt interface{}) *EntryGroupInterface_UpdateServiceTxt_Call {
	return &EntryGroupInterface_UpdateServiceTxt_Call{Call: _e.mock.On("UpdateServiceTxt", iface, protocol, flags, name, serviceType, domain, txt)}
}

func (_c *EntryGroupInterface_UpdateServiceTxt_Call) Run(run func(iface int32, protocol int32, flags uint32, name string, serviceType string, domain string, txt [][]byte)) *EntryGroupInterface_UpdateServiceTxt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int32), args[1].(int32), args[2].(uint32), args[3].(string), args[4].(string), args[5].(string), args[6].([][]byte))
	})
	return _c
}

func (_c *EntryGroupInterface_UpdateServiceTxt_Call) Return(_a0 error) *EntryGroupInterface_UpdateServiceTxt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EntryGroupInterface_UpdateServiceTxt_Call) RunAndReturn(run func(int32, int32, uint32, string, string, string, [][]byte) error) *EntryGroupInterface_UpdateServiceTxt_Call {
	_c.Call.Return(run)
	return _c
}

// NewEntryGroupInterface creates a new instance of EntryGroupInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEntryGroupInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *EntryGroupInterface {
	mock := &EntryGroupInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
